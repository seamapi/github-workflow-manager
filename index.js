#!/usr/bin/env node

const yargs = require("yargs/yargs")
const { hideBin } = require("yargs/helpers")
const chalk = require("chalk")
const { readdirSync } = require("fs")
const fs = require("fs/promises")
const path = require("path")
const yaml = require("yaml")
const prompts = require("prompts")
const selectUserWorkflow = require("./lib/selectUserWorkflow")
const findGitRoot = require("find-git-root")

const workflows = readdirSync(path.resolve(__dirname, "workflows")).reduce(
  (agg, dirName) => ({
    ...agg,
    [dirName]: require(path.resolve(__dirname, "workflows", dirName)),
  }),
  {}
)

async function main() {
  const yargsBuilder = yargs(hideBin(process.argv))

  for (const wfName in workflows) {
    if (!workflows[wfName].description)
      throw new Error(
        `Workflow Template "${wfName}" is missing the "description" export.`
      )
    yargsBuilder.command(wfName, workflows[wfName].description)
  }

  const argv = yargsBuilder.argv

  if (argv._.length === 0) {
    yargsBuilder.showHelp()
    process.exit(1)
  }

  const workflowType = argv._[0]

  if (!workflows[workflowType]) {
    yargsBuilder.showHelp()
    process.exit(1)
  }

  const userRepoDir = path.resolve(findGitRoot(process.cwd()), "..")

  const { selectedWorkflowName, gwmConfig } = await selectUserWorkflow({
    userRepoDir,
    workflowType,
    workflowDef: workflows[workflowType],
  })

  const createdWorkflow = await workflows[
    workflowType
  ].createWorkflowInteractive({ ...argv, userRepoDir, config: gwmConfig })

  const outputPath = path.resolve(
    userRepoDir,
    ".github",
    "workflows",
    `${selectedWorkflowName}.yml`
  )
  console.log(`Writing to "${outputPath.replace(userRepoDir + "/", "")}"`)
  // console.log(createdWorkflow.content)
  await fs.writeFile(
    outputPath,
    `# GENERATED BY github-workflow-manager\n# gwm: ${JSON.stringify({
      type: workflowType,
      ...createdWorkflow.config,
    })}\n${
      typeof createdWorkflow.content === "string"
        ? createdWorkflow.content
        : yaml.stringify(createdWorkflow.content)
    }`
  )

  console.log(
    `\n\n${chalk.green(
      "Success!"
    )}\n\n${workflowType} usage: \n=====================================================\n\n${
      workflows[workflowType].usage
    }\n\n`
  )
}

if (!module.parent) {
  process.on("SIGINT", () => process.exit(1))
  main().catch((e) => {
    console.log(chalk.red(e.toString() + "\n\n" + e.stack))
  })
}
